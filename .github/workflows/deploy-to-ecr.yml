name: Build and Deploy to ECR/ECS

on:
  push:
    branches: [ "mongo+docker" ]
  pull_request:
    branches: [ "mongo+docker" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: "Deploy to ECS after push? (yes/no)"
        required: true
        default: "yes"
      extra_tag:
        description: "Optional extra image tag to push (e.g. staging)"
        required: false

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      REGISTRY: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (compute tags)
        id: meta
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}
          tags: |
            type=raw,value=latest
            type=sha
            type=raw,value=${{ github.event.inputs.extra_tag }},enable=${{ github.event.inputs.extra_tag != '' }}

      - name: Build & Push (linux/amd64)
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Preview (linux/amd64)
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment preview info on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const repo = process.env.REGISTRY;
            const tag = `pr-${{ github.event.number }}`;
            const body = [
              "ðŸ§ª **Preview image pushed to ECR**",
              "",
              "```",
              `${repo}:${tag}`,
              "```",
              "",
              "Pull & run locally:",
              "```bash",
              `docker pull ${repo}:${tag}`,
              `docker run -p 3000:3000 -e MONGODB_URI=... -e NEXTAUTH_SECRET=... -e NEXTAUTH_URL=http://localhost:3000 ${repo}:${tag}`,
              "```"
            ].join("\\n");
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Force new ECS deployment
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'yes') }}
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment \
            --region "$AWS_REGION"

      - name: Show deployment status
        if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'yes') }}
        run: |
          aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "$AWS_REGION" \
            --query "services[0].deployments"